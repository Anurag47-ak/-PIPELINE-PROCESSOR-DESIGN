module pipeline_processor (
    input clk,
    input reset
);

    // Opcodes
    parameter ADD = 4'b0001;
    parameter SUB = 4'b0010;
    parameter LOAD = 4'b0011;

    // Instruction memory
    reg [15:0] instr_mem[0:7];
    reg [7:0] pc;

    // Register file
    reg [7:0] regfile[0:15];
    reg [7:0] memory[0:15];

    // Pipeline registers
    reg [15:0] IF_ID, ID_EX;
    reg [7:0] EX_MEM_result;
    reg [3:0] EX_MEM_dest;
    reg [3:0] EX_MEM_opcode;

    // IF stage
    always @(posedge clk or posedge reset) begin
        if (reset)
            pc <= 0;
        else
            IF_ID <= instr_mem[pc++];
    end

    // ID stage
    reg [3:0] opcode, dest, src1, src2;
    reg [7:0] op1, op2;

    always @(posedge clk) begin
        opcode <= IF_ID[15:12];
        dest   <= IF_ID[11:8];
        src1   <= IF_ID[7:4];
        src2   <= IF_ID[3:0];

        op1 <= regfile[src1];
        op2 <= regfile[src2];

        ID_EX <= IF_ID;
    end

    // EX stage
    always @(posedge clk) begin
        EX_MEM_opcode <= opcode;
        EX_MEM_dest <= dest;

        case (opcode)
            ADD: EX_MEM_result <= op1 + op2;
            SUB: EX_MEM_result <= op1 - op2;
            LOAD: EX_MEM_result <= memory[op1]; // address from src1
            default: EX_MEM_result <= 0;
        endcase
    end

    // MEM / Write-back stage
    always @(posedge clk) begin
        if (EX_MEM_opcode != 4'b0000)
            regfile[EX_MEM_dest] <= EX_MEM_result;
    end

    // Initialize instruction memory
    initial begin
        // Example program:
        // ADD R1, R2, R3
        // SUB R4, R1, R3
        // LOAD R5, [R2]
        instr_mem[0] = {ADD, 4'd1, 4'd2, 4'd3};
        instr_mem[1] = {SUB, 4'd4, 4'd1, 4'd3};
        instr_mem[2] = {LOAD, 4'd5, 4'd2, 4'd0}; // src2 unused for LOAD

        regfile[2] = 10;  // R2
        regfile[3] = 5;   // R3
        memory[10] = 99;  // For LOAD
    end

endmodule


